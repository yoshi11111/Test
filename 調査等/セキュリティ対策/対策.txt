     ■XSS対策
    
        [WebMethod()]
        public static string DoPost(string json, string type)
        {
            var settings = new JsonSerializerSettings
            {
                ContractResolver = new CustomResolver(),
                Formatting = Formatting.Indented
            };
            // 画面の開発者ツール等から、すべてのコントロールにタグ文字などを設定できてしまうため
            // 全てのプロパティをエンコード
            // こちらが管理していないDBにタブ文字等が入った場合、管轄外の画面に影響が出る可能性があるため
            // JSONを受け取った時点で全て対処
            Json j = JsonConvert.DeserializeObject<Json>(json, settings);
         
            // v-htmlなど、XSSの発生する可能性はある。
            // かつ、こちらが管理していないDBにエスケープすべき文字が入力されていた場合
            // 防げないため、表示するためのJsonも同様にエンコードを行う
            return JsonConvert.SerializeObject(j, settings);
        }

        public class CustomResolver : DefaultContractResolver
        {
            protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)
            {
                IList<JsonProperty> props = base.CreateProperties(type, memberSerialization);
                foreach (JsonProperty prop in props.Where(p => p.PropertyType == typeof(string)))
                {
                    PropertyInfo pi = type.GetProperty(prop.UnderlyingName);
                    if (pi != null)
                    {
                        prop.ValueProvider = new HtmlEncodingValueProvider(pi);
                    }
                }
                return props;
            }

            protected class HtmlEncodingValueProvider : IValueProvider
            {
                private PropertyInfo targetProperty;

                public HtmlEncodingValueProvider(PropertyInfo targetProperty)
                {
                    this.targetProperty = targetProperty;
                }
                public void SetValue(object target, object value)
                {
                    if (value == null)
                    {
                        targetProperty.SetValue(target, value, null);
                    }
                    else
                    {
                        string valueStr = HttpUtility.HtmlDecode(value.ToString());
                        targetProperty.SetValue(target, HttpUtility.HtmlEncode(valueStr), null);
                    }
                }
                public object GetValue(object target)
                {
                    string value = (string)targetProperty.GetValue(target, null);
                    value = HttpUtility.HtmlDecode(value);
                    return System.Web.HttpUtility.HtmlEncode(value);
                }
            }
        }
        
        
        
    public class BaseForm : Page
    {
        protected override void OnLoad(EventArgs e)
        {
            JsonConvert.DefaultSettings = () => new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                ContractResolver = new CustomResolver()
            };
        }
    }
        
        
 
    ■CSRF→前回のプロジェクトのソースの確認、及びaiosによる管理？
    



  
    【単体テストフェーズ完了後（ていうか自分の範囲はもうやってもいい）】
    ■SQLインジェクション対策→すべてのSQLにおいて、SQLパラメータ（プレスホルダー使用）
 　　〇規定がNVercharのため、型指定が必要。じゃないと遅くなる
 　　https://baiteen.wordpress.com/2010/11/12/%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%A8sqlserver%E3%81%AE%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%8C%E9%81%85%E3%81%84
　　〇LIKE→ LIKE   nullの場合はDBNULLValue、null以外の場合は、%値%
　　　⇒オーバーロードでみっつ用意して、decimal?string?DateTime?で用意。今のメソッド名のまま、オーバーロード。
　　　で、型ごとに設定した型設定のsqlparameteer返すようにすればいい
　　
　　
